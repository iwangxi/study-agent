import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Dm69qQhB.js";const d=JSON.parse('{"title":"🎯 全栈开发面试指南","description":"","frontmatter":{},"headers":[],"relativePath":"interview/index.md","filePath":"interview/index.md","lastUpdated":1755791776000}'),t={name:"interview/index.md"};function e(p,s,h,r,k,o){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="🎯-全栈开发面试指南" tabindex="-1">🎯 全栈开发面试指南 <a class="header-anchor" href="#🎯-全栈开发面试指南" aria-label="Permalink to &quot;🎯 全栈开发面试指南&quot;">​</a></h1><h2 id="📋-面试准备概览" tabindex="-1">📋 面试准备概览 <a class="header-anchor" href="#📋-面试准备概览" aria-label="Permalink to &quot;📋 面试准备概览&quot;">​</a></h2><p>本指南专为 <strong>NestJS + Vue3 + TypeORM</strong> 技术栈的全栈开发者准备，涵盖从初级到高级的面试题目和答题技巧。</p><h3 id="🎯-面试准备策略" tabindex="-1">🎯 面试准备策略 <a class="header-anchor" href="#🎯-面试准备策略" aria-label="Permalink to &quot;🎯 面试准备策略&quot;">​</a></h3><ol><li><strong>技术基础</strong> - 扎实的前后端基础知识</li><li><strong>项目经验</strong> - 完整的项目开发经历</li><li><strong>问题解决</strong> - 分析和解决问题的能力</li><li><strong>沟通表达</strong> - 清晰的技术表达能力</li><li><strong>学习能力</strong> - 持续学习和适应新技术</li></ol><h2 id="📊-面试难度分级" tabindex="-1">📊 面试难度分级 <a class="header-anchor" href="#📊-面试难度分级" aria-label="Permalink to &quot;📊 面试难度分级&quot;">​</a></h2><ul><li>🟢 <strong>初级 (1-2年经验)</strong> - 基础概念和简单应用</li><li>🟡 <strong>中级 (2-4年经验)</strong> - 深入理解和实际应用</li><li>🔴 <strong>高级 (4年以上经验)</strong> - 架构设计和性能优化</li></ul><h2 id="🎨-前端面试题-vue3" tabindex="-1">🎨 前端面试题 (Vue3) <a class="header-anchor" href="#🎨-前端面试题-vue3" aria-label="Permalink to &quot;🎨 前端面试题 (Vue3)&quot;">​</a></h2><h3 id="🟢-基础题目" tabindex="-1">🟢 基础题目 <a class="header-anchor" href="#🟢-基础题目" aria-label="Permalink to &quot;🟢 基础题目&quot;">​</a></h3><h4 id="_1-vue3-相比-vue2-有哪些主要改进" tabindex="-1">1. Vue3 相比 Vue2 有哪些主要改进？ <a class="header-anchor" href="#_1-vue3-相比-vue2-有哪些主要改进" aria-label="Permalink to &quot;1. Vue3 相比 Vue2 有哪些主要改进？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>Composition API</strong> - 更好的逻辑复用和组织</li><li><strong>性能提升</strong> - 更小的包体积，更快的渲染</li><li><strong>TypeScript 支持</strong> - 原生 TypeScript 支持</li><li><strong>多根节点</strong> - Fragment 支持</li><li><strong>更好的 Tree-shaking</strong> - 按需引入</li></ul><p><strong>示例代码：</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue2 Options API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue3 Composition API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> increment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count, increment }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_2-解释-ref-和-reactive-的区别" tabindex="-1">2. 解释 ref 和 reactive 的区别 <a class="header-anchor" href="#_2-解释-ref-和-reactive-的区别" aria-label="Permalink to &quot;2. 解释 ref 和 reactive 的区别&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>ref</strong> - 用于基本类型，需要 .value 访问</li><li><strong>reactive</strong> - 用于对象类型，直接访问属性</li><li><strong>响应式原理</strong> - Proxy 代理实现</li></ul><p><strong>示例代码：</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ref 用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count.value) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要 .value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// reactive 用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Vue3&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接访问</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3-什么是-composition-api-有什么优势" tabindex="-1">3. 什么是 Composition API？有什么优势？ <a class="header-anchor" href="#_3-什么是-composition-api-有什么优势" aria-label="Permalink to &quot;3. 什么是 Composition API？有什么优势？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>逻辑复用</strong> - 更好的代码组织和复用</li><li><strong>类型推导</strong> - 更好的 TypeScript 支持</li><li><strong>性能优化</strong> - 更精确的依赖追踪</li><li><strong>代码组织</strong> - 按功能而非选项组织代码</li></ul><h3 id="🟡-中级题目" tabindex="-1">🟡 中级题目 <a class="header-anchor" href="#🟡-中级题目" aria-label="Permalink to &quot;🟡 中级题目&quot;">​</a></h3><h4 id="_4-如何在-vue3-中实现组件通信" tabindex="-1">4. 如何在 Vue3 中实现组件通信？ <a class="header-anchor" href="#_4-如何在-vue3-中实现组件通信" aria-label="Permalink to &quot;4. 如何在 Vue3 中实现组件通信？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>Props/Emit</strong> - 父子组件通信</li><li><strong>Provide/Inject</strong> - 跨层级组件通信</li><li><strong>Pinia</strong> - 全局状态管理</li><li><strong>Event Bus</strong> - 兄弟组件通信</li></ul><p><strong>示例代码：</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父子组件通信</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChildComponent</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> :data=&quot;parentData&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> @update=&quot;handleUpdate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEmits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;update&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Provide/Inject</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 祖先组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;theme&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dark&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后代组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;theme&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_5-解释-vue3-的响应式原理" tabindex="-1">5. 解释 Vue3 的响应式原理 <a class="header-anchor" href="#_5-解释-vue3-的响应式原理" aria-label="Permalink to &quot;5. 解释 Vue3 的响应式原理&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>Proxy 代理</strong> - 替代 Vue2 的 Object.defineProperty</li><li><strong>依赖收集</strong> - track 函数收集依赖</li><li><strong>触发更新</strong> - trigger 函数触发更新</li><li><strong>性能优化</strong> - 更精确的更新机制</li></ul><h3 id="🔴-高级题目" tabindex="-1">🔴 高级题目 <a class="header-anchor" href="#🔴-高级题目" aria-label="Permalink to &quot;🔴 高级题目&quot;">​</a></h3><h4 id="_6-如何优化-vue3-应用的性能" tabindex="-1">6. 如何优化 Vue3 应用的性能？ <a class="header-anchor" href="#_6-如何优化-vue3-应用的性能" aria-label="Permalink to &quot;6. 如何优化 Vue3 应用的性能？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>代码分割</strong> - 路由懒加载和组件懒加载</li><li><strong>虚拟滚动</strong> - 处理大量数据</li><li><strong>缓存策略</strong> - keep-alive 和 HTTP 缓存</li><li><strong>打包优化</strong> - Tree-shaking 和压缩</li></ul><p><strong>示例代码：</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 路由懒加载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./views/About.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件懒加载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AsyncComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./components/HeavyComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="⚙️-后端面试题-nestjs" tabindex="-1">⚙️ 后端面试题 (NestJS) <a class="header-anchor" href="#⚙️-后端面试题-nestjs" aria-label="Permalink to &quot;⚙️ 后端面试题 (NestJS)&quot;">​</a></h2><h3 id="🟢-基础题目-1" tabindex="-1">🟢 基础题目 <a class="header-anchor" href="#🟢-基础题目-1" aria-label="Permalink to &quot;🟢 基础题目&quot;">​</a></h3><h4 id="_1-什么是-nestjs-它有什么特点" tabindex="-1">1. 什么是 NestJS？它有什么特点？ <a class="header-anchor" href="#_1-什么是-nestjs-它有什么特点" aria-label="Permalink to &quot;1. 什么是 NestJS？它有什么特点？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>企业级框架</strong> - 基于 Node.js 的可扩展框架</li><li><strong>装饰器模式</strong> - 使用装饰器进行声明式编程</li><li><strong>依赖注入</strong> - 强大的 IoC 容器</li><li><strong>模块化</strong> - 清晰的模块组织结构</li><li><strong>TypeScript 优先</strong> - 原生 TypeScript 支持</li></ul><h4 id="_2-解释-nestjs-中的依赖注入" tabindex="-1">2. 解释 NestJS 中的依赖注入 <a class="header-anchor" href="#_2-解释-nestjs-中的依赖注入" aria-label="Permalink to &quot;2. 解释 NestJS 中的依赖注入&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>IoC 容器</strong> - 控制反转容器管理依赖</li><li><strong>Provider</strong> - 服务提供者</li><li><strong>Injectable 装饰器</strong> - 标记可注入的类</li><li><strong>构造函数注入</strong> - 通过构造函数注入依赖</li></ul><p><strong>示例代码：</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InjectRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> userRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> userService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3-nestjs-中的模块系统是如何工作的" tabindex="-1">3. NestJS 中的模块系统是如何工作的？ <a class="header-anchor" href="#_3-nestjs-中的模块系统是如何工作的" aria-label="Permalink to &quot;3. NestJS 中的模块系统是如何工作的？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>@Module 装饰器</strong> - 定义模块</li><li><strong>imports</strong> - 导入其他模块</li><li><strong>providers</strong> - 模块内的服务提供者</li><li><strong>controllers</strong> - 模块内的控制器</li><li><strong>exports</strong> - 导出给其他模块使用</li></ul><h3 id="🟡-中级题目-1" tabindex="-1">🟡 中级题目 <a class="header-anchor" href="#🟡-中级题目-1" aria-label="Permalink to &quot;🟡 中级题目&quot;">​</a></h3><h4 id="_4-如何在-nestjs-中实现身份认证和授权" tabindex="-1">4. 如何在 NestJS 中实现身份认证和授权？ <a class="header-anchor" href="#_4-如何在-nestjs-中实现身份认证和授权" aria-label="Permalink to &quot;4. 如何在 NestJS 中实现身份认证和授权？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>JWT 策略</strong> - JSON Web Token 认证</li><li><strong>Guards</strong> - 路由守卫</li><li><strong>Passport 集成</strong> - 认证策略</li><li><strong>角色权限</strong> - 基于角色的访问控制</li></ul><p><strong>示例代码：</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JwtAuthGuard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthGuard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jwt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RolesGuard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CanActivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> reflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Reflector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  canActivate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> roles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.reflector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;roles&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">roles) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">switchToHttp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.user;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> roles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">role</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.roles?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(role));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_5-解释-nestjs-中的中间件、拦截器和管道的区别" tabindex="-1">5. 解释 NestJS 中的中间件、拦截器和管道的区别 <a class="header-anchor" href="#_5-解释-nestjs-中的中间件、拦截器和管道的区别" aria-label="Permalink to &quot;5. 解释 NestJS 中的中间件、拦截器和管道的区别&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>中间件 (Middleware)</strong> - 请求处理前执行</li><li><strong>拦截器 (Interceptor)</strong> - 方法执行前后处理</li><li><strong>管道 (Pipe)</strong> - 数据转换和验证</li><li><strong>执行顺序</strong> - 中间件 → 守卫 → 拦截器 → 管道 → 控制器</li></ul><h3 id="🔴-高级题目-1" tabindex="-1">🔴 高级题目 <a class="header-anchor" href="#🔴-高级题目-1" aria-label="Permalink to &quot;🔴 高级题目&quot;">​</a></h3><h4 id="_6-如何设计-nestjs-微服务架构" tabindex="-1">6. 如何设计 NestJS 微服务架构？ <a class="header-anchor" href="#_6-如何设计-nestjs-微服务架构" aria-label="Permalink to &quot;6. 如何设计 NestJS 微服务架构？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>服务拆分</strong> - 按业务领域拆分服务</li><li><strong>通信方式</strong> - TCP、Redis、RabbitMQ 等</li><li><strong>服务发现</strong> - 服务注册和发现机制</li><li><strong>数据一致性</strong> - 事件驱动和 Saga 模式</li></ul><h2 id="💾-数据库面试题-typeorm" tabindex="-1">💾 数据库面试题 (TypeORM) <a class="header-anchor" href="#💾-数据库面试题-typeorm" aria-label="Permalink to &quot;💾 数据库面试题 (TypeORM)&quot;">​</a></h2><h3 id="🟢-基础题目-2" tabindex="-1">🟢 基础题目 <a class="header-anchor" href="#🟢-基础题目-2" aria-label="Permalink to &quot;🟢 基础题目&quot;">​</a></h3><h4 id="_1-什么是-orm-typeorm-有什么优势" tabindex="-1">1. 什么是 ORM？TypeORM 有什么优势？ <a class="header-anchor" href="#_1-什么是-orm-typeorm-有什么优势" aria-label="Permalink to &quot;1. 什么是 ORM？TypeORM 有什么优势？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>对象关系映射</strong> - 将数据库表映射为对象</li><li><strong>类型安全</strong> - TypeScript 类型检查</li><li><strong>跨数据库</strong> - 支持多种数据库</li><li><strong>迁移系统</strong> - 自动生成和执行迁移</li></ul><h4 id="_2-如何在-typeorm-中定义实体关系" tabindex="-1">2. 如何在 TypeORM 中定义实体关系？ <a class="header-anchor" href="#_2-如何在-typeorm-中定义实体关系" aria-label="Permalink to &quot;2. 如何在 TypeORM 中定义实体关系？&quot;">​</a></h4><p><strong>示例代码：</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一对多关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OneToMany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Post, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> post.author)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ManyToOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.posts)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多对多关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ManyToMany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tag, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag.posts)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JoinTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  tags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="🟡-中级题目-2" tabindex="-1">🟡 中级题目 <a class="header-anchor" href="#🟡-中级题目-2" aria-label="Permalink to &quot;🟡 中级题目&quot;">​</a></h3><h4 id="_3-如何优化-typeorm-查询性能" tabindex="-1">3. 如何优化 TypeORM 查询性能？ <a class="header-anchor" href="#_3-如何优化-typeorm-查询性能" aria-label="Permalink to &quot;3. 如何优化 TypeORM 查询性能？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>预加载关系</strong> - eager loading vs lazy loading</li><li><strong>查询构建器</strong> - 复杂查询优化</li><li><strong>索引使用</strong> - 数据库索引优化</li><li><strong>批量操作</strong> - 减少数据库往返</li></ul><p><strong>示例代码：</strong></p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预加载关系</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  relations: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;posts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询构建器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> postRepository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createQueryBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">leftJoinAndSelect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post.author&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;author&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post.published = :published&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { published: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">orderBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post.createdAt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DESC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="🏗️-系统设计题目" tabindex="-1">🏗️ 系统设计题目 <a class="header-anchor" href="#🏗️-系统设计题目" aria-label="Permalink to &quot;🏗️ 系统设计题目&quot;">​</a></h2><h3 id="🔴-高级题目-2" tabindex="-1">🔴 高级题目 <a class="header-anchor" href="#🔴-高级题目-2" aria-label="Permalink to &quot;🔴 高级题目&quot;">​</a></h3><h4 id="_1-设计一个高并发的博客系统" tabindex="-1">1. 设计一个高并发的博客系统 <a class="header-anchor" href="#_1-设计一个高并发的博客系统" aria-label="Permalink to &quot;1. 设计一个高并发的博客系统&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>架构设计</strong> - 微服务 vs 单体应用</li><li><strong>数据库设计</strong> - 读写分离、分库分表</li><li><strong>缓存策略</strong> - Redis 缓存层</li><li><strong>CDN 加速</strong> - 静态资源分发</li><li><strong>负载均衡</strong> - 请求分发策略</li></ul><h4 id="_2-如何处理系统的高可用性" tabindex="-1">2. 如何处理系统的高可用性？ <a class="header-anchor" href="#_2-如何处理系统的高可用性" aria-label="Permalink to &quot;2. 如何处理系统的高可用性？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>容错设计</strong> - 熔断器、重试机制</li><li><strong>监控告警</strong> - 实时监控和告警</li><li><strong>备份恢复</strong> - 数据备份和灾难恢复</li><li><strong>灰度发布</strong> - 渐进式部署策略</li></ul><h2 id="💼-项目经验题目" tabindex="-1">💼 项目经验题目 <a class="header-anchor" href="#💼-项目经验题目" aria-label="Permalink to &quot;💼 项目经验题目&quot;">​</a></h2><h3 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h3><h4 id="_1-介绍一个你最满意的项目" tabindex="-1">1. 介绍一个你最满意的项目 <a class="header-anchor" href="#_1-介绍一个你最满意的项目" aria-label="Permalink to &quot;1. 介绍一个你最满意的项目&quot;">​</a></h4><p><strong>答题结构：</strong></p><ul><li><strong>项目背景</strong> - 业务需求和技术挑战</li><li><strong>技术选型</strong> - 为什么选择这些技术</li><li><strong>架构设计</strong> - 系统架构和模块划分</li><li><strong>难点解决</strong> - 遇到的问题和解决方案</li><li><strong>项目成果</strong> - 最终效果和收获</li></ul><h4 id="_2-你在项目中遇到的最大挑战是什么" tabindex="-1">2. 你在项目中遇到的最大挑战是什么？ <a class="header-anchor" href="#_2-你在项目中遇到的最大挑战是什么" aria-label="Permalink to &quot;2. 你在项目中遇到的最大挑战是什么？&quot;">​</a></h4><p><strong>答题要点：</strong></p><ul><li><strong>具体问题</strong> - 详细描述遇到的问题</li><li><strong>分析过程</strong> - 如何分析和定位问题</li><li><strong>解决方案</strong> - 采用的解决方法</li><li><strong>经验总结</strong> - 从中学到的经验教训</li></ul><h2 id="📚-面试准备建议" tabindex="-1">📚 面试准备建议 <a class="header-anchor" href="#📚-面试准备建议" aria-label="Permalink to &quot;📚 面试准备建议&quot;">​</a></h2><h3 id="技术准备" tabindex="-1">技术准备 <a class="header-anchor" href="#技术准备" aria-label="Permalink to &quot;技术准备&quot;">​</a></h3><ol><li><strong>基础知识</strong> - 扎实掌握核心概念</li><li><strong>实战项目</strong> - 完成至少 2-3 个完整项目</li><li><strong>源码阅读</strong> - 了解框架底层实现</li><li><strong>性能优化</strong> - 掌握常见优化技巧</li></ol><h3 id="软技能准备" tabindex="-1">软技能准备 <a class="header-anchor" href="#软技能准备" aria-label="Permalink to &quot;软技能准备&quot;">​</a></h3><ol><li><strong>沟通表达</strong> - 清晰表达技术观点</li><li><strong>问题解决</strong> - 结构化思考问题</li><li><strong>学习能力</strong> - 展示持续学习的态度</li><li><strong>团队协作</strong> - 分享团队合作经验</li></ol><h3 id="面试技巧" tabindex="-1">面试技巧 <a class="header-anchor" href="#面试技巧" aria-label="Permalink to &quot;面试技巧&quot;">​</a></h3><ol><li><strong>STAR 法则</strong> - 情境、任务、行动、结果</li><li><strong>代码演示</strong> - 准备常见算法和代码片段</li><li><strong>提问环节</strong> - 准备有质量的问题</li><li><strong>心态调整</strong> - 保持自信和积极态度</li></ol><h2 id="🎯-面试复习清单" tabindex="-1">🎯 面试复习清单 <a class="header-anchor" href="#🎯-面试复习清单" aria-label="Permalink to &quot;🎯 面试复习清单&quot;">​</a></h2><h3 id="前端技术栈" tabindex="-1">前端技术栈 <a class="header-anchor" href="#前端技术栈" aria-label="Permalink to &quot;前端技术栈&quot;">​</a></h3><ul><li>[ ] Vue3 Composition API</li><li>[ ] TypeScript 高级类型</li><li>[ ] Vite 构建工具</li><li>[ ] Pinia 状态管理</li><li>[ ] Vue Router 路由</li><li>[ ] 性能优化技巧</li></ul><h3 id="后端技术栈" tabindex="-1">后端技术栈 <a class="header-anchor" href="#后端技术栈" aria-label="Permalink to &quot;后端技术栈&quot;">​</a></h3><ul><li>[ ] NestJS 核心概念</li><li>[ ] TypeORM 数据库操作</li><li>[ ] JWT 身份认证</li><li>[ ] 微服务架构</li><li>[ ] API 设计规范</li><li>[ ] 错误处理机制</li></ul><h3 id="工程化技能" tabindex="-1">工程化技能 <a class="header-anchor" href="#工程化技能" aria-label="Permalink to &quot;工程化技能&quot;">​</a></h3><ul><li>[ ] Git 版本控制</li><li>[ ] Docker 容器化</li><li>[ ] CI/CD 流程</li><li>[ ] 测试策略</li><li>[ ] 代码规范</li><li>[ ] 性能监控</li></ul><h3 id="软技能" tabindex="-1">软技能 <a class="header-anchor" href="#软技能" aria-label="Permalink to &quot;软技能&quot;">​</a></h3><ul><li>[ ] 项目管理经验</li><li>[ ] 团队协作能力</li><li>[ ] 沟通表达技巧</li><li>[ ] 问题解决思路</li><li>[ ] 学习成长规划</li></ul><hr><p>🎯 <strong>面试成功的关键在于充分准备和实际经验的积累。</strong> 通过系统性的学习和实践，相信你能在面试中展现出色的技术能力和职业素养！</p><p><strong>最后建议：</strong></p><ul><li>多做实际项目，积累真实经验</li><li>关注技术发展趋势，保持学习热情</li><li>培养解决问题的思维方式</li><li>提升沟通表达和团队协作能力</li></ul>`,113)])])}const E=i(t,[["render",e]]);export{d as __pageData,E as default};
